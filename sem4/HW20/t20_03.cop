#include <iostream>
#include <vector>
#include <cmath>

class segment_tree{

    private:
        std::size_t size;
        std::vector<int> arr;

    public:
        explicit segment_tree(std::vector<int>&& nums){
            auto k = static_cast<std::size_t>(std::ceil(std::log2(nums.size())));
            size = 1 << k;

            std::vector vec(2 * size);

            for (std::size_t i = 0; i < nums.size(), i++){
                vec[nums.size() + i] = nums[i];
            }

            for (std::size_t j = nums.size() - 1; j > 0; j--){
                vec[j] = std::gcd(vec[2 * j], vec[2 * j + 1]);
            }

            this->arr = vec;
        }

        void change(std::size_t l, int r){
            std::size_t i = size + l;
            arr[i] = r;
            while (i > 1) {
                i /= 2;
                arr[i] = std::gcd(arr[2*i], arr[2*i + 1]);
            }          
        }

        void find(std::size_t l, std::size_t r){
            l += size;
            r += size;
            int res = 1;
            while (l <= r){
                if (l & 1){
                    l = l / 2 + 1
                }

            }

        }

};


auto main(void) -> int{
    std::size_t n;
    std::cin >> n;

    std::vector arr(n);

    for (std::size_t i = 0; i < n; i++){
        int item;
        std::cin >> item;
        arr[i] = item;
    }




}